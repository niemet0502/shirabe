// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: readingprogress.proto

package readingprogress

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ReadingService_CreateReadingProgress_FullMethodName = "/ReadingService/CreateReadingProgress"
	ReadingService_GetReadingProgress_FullMethodName    = "/ReadingService/GetReadingProgress"
)

// ReadingServiceClient is the client API for ReadingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReadingServiceClient interface {
	CreateReadingProgress(ctx context.Context, in *CreateReadingProgressRequest, opts ...grpc.CallOption) (*ReadingProgress, error)
	GetReadingProgress(ctx context.Context, in *GetReadingProgressRequest, opts ...grpc.CallOption) (*ReadingProgresses, error)
}

type readingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReadingServiceClient(cc grpc.ClientConnInterface) ReadingServiceClient {
	return &readingServiceClient{cc}
}

func (c *readingServiceClient) CreateReadingProgress(ctx context.Context, in *CreateReadingProgressRequest, opts ...grpc.CallOption) (*ReadingProgress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadingProgress)
	err := c.cc.Invoke(ctx, ReadingService_CreateReadingProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readingServiceClient) GetReadingProgress(ctx context.Context, in *GetReadingProgressRequest, opts ...grpc.CallOption) (*ReadingProgresses, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadingProgresses)
	err := c.cc.Invoke(ctx, ReadingService_GetReadingProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReadingServiceServer is the server API for ReadingService service.
// All implementations must embed UnimplementedReadingServiceServer
// for forward compatibility
type ReadingServiceServer interface {
	CreateReadingProgress(context.Context, *CreateReadingProgressRequest) (*ReadingProgress, error)
	GetReadingProgress(context.Context, *GetReadingProgressRequest) (*ReadingProgresses, error)
	mustEmbedUnimplementedReadingServiceServer()
}

// UnimplementedReadingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReadingServiceServer struct {
}

func (UnimplementedReadingServiceServer) CreateReadingProgress(context.Context, *CreateReadingProgressRequest) (*ReadingProgress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReadingProgress not implemented")
}
func (UnimplementedReadingServiceServer) GetReadingProgress(context.Context, *GetReadingProgressRequest) (*ReadingProgresses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadingProgress not implemented")
}
func (UnimplementedReadingServiceServer) mustEmbedUnimplementedReadingServiceServer() {}

// UnsafeReadingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReadingServiceServer will
// result in compilation errors.
type UnsafeReadingServiceServer interface {
	mustEmbedUnimplementedReadingServiceServer()
}

func RegisterReadingServiceServer(s grpc.ServiceRegistrar, srv ReadingServiceServer) {
	s.RegisterService(&ReadingService_ServiceDesc, srv)
}

func _ReadingService_CreateReadingProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReadingProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadingServiceServer).CreateReadingProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReadingService_CreateReadingProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadingServiceServer).CreateReadingProgress(ctx, req.(*CreateReadingProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadingService_GetReadingProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadingProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadingServiceServer).GetReadingProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReadingService_GetReadingProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadingServiceServer).GetReadingProgress(ctx, req.(*GetReadingProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReadingService_ServiceDesc is the grpc.ServiceDesc for ReadingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReadingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ReadingService",
	HandlerType: (*ReadingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReadingProgress",
			Handler:    _ReadingService_CreateReadingProgress_Handler,
		},
		{
			MethodName: "GetReadingProgress",
			Handler:    _ReadingService_GetReadingProgress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "readingprogress.proto",
}
