// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: shelve.proto

package shelve

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ShelveService_GetShelves_FullMethodName  = "/ShelveService/GetShelves"
	ShelveService_CreateShelf_FullMethodName = "/ShelveService/CreateShelf"
	ShelveService_UpdateShelf_FullMethodName = "/ShelveService/UpdateShelf"
	ShelveService_RemoveShelf_FullMethodName = "/ShelveService/RemoveShelf"
)

// ShelveServiceClient is the client API for ShelveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShelveServiceClient interface {
	GetShelves(ctx context.Context, in *GetShelvesRequest, opts ...grpc.CallOption) (*GetShelvesResponse, error)
	CreateShelf(ctx context.Context, in *CreateShelfRequest, opts ...grpc.CallOption) (*CreateShelfResponse, error)
	UpdateShelf(ctx context.Context, in *UpdateShelfRequest, opts ...grpc.CallOption) (*UpdateShelfResponse, error)
	RemoveShelf(ctx context.Context, in *RemoveShelfRequest, opts ...grpc.CallOption) (*RemoveShelfResponse, error)
}

type shelveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShelveServiceClient(cc grpc.ClientConnInterface) ShelveServiceClient {
	return &shelveServiceClient{cc}
}

func (c *shelveServiceClient) GetShelves(ctx context.Context, in *GetShelvesRequest, opts ...grpc.CallOption) (*GetShelvesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShelvesResponse)
	err := c.cc.Invoke(ctx, ShelveService_GetShelves_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shelveServiceClient) CreateShelf(ctx context.Context, in *CreateShelfRequest, opts ...grpc.CallOption) (*CreateShelfResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateShelfResponse)
	err := c.cc.Invoke(ctx, ShelveService_CreateShelf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shelveServiceClient) UpdateShelf(ctx context.Context, in *UpdateShelfRequest, opts ...grpc.CallOption) (*UpdateShelfResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateShelfResponse)
	err := c.cc.Invoke(ctx, ShelveService_UpdateShelf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shelveServiceClient) RemoveShelf(ctx context.Context, in *RemoveShelfRequest, opts ...grpc.CallOption) (*RemoveShelfResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveShelfResponse)
	err := c.cc.Invoke(ctx, ShelveService_RemoveShelf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShelveServiceServer is the server API for ShelveService service.
// All implementations must embed UnimplementedShelveServiceServer
// for forward compatibility
type ShelveServiceServer interface {
	GetShelves(context.Context, *GetShelvesRequest) (*GetShelvesResponse, error)
	CreateShelf(context.Context, *CreateShelfRequest) (*CreateShelfResponse, error)
	UpdateShelf(context.Context, *UpdateShelfRequest) (*UpdateShelfResponse, error)
	RemoveShelf(context.Context, *RemoveShelfRequest) (*RemoveShelfResponse, error)
	mustEmbedUnimplementedShelveServiceServer()
}

// UnimplementedShelveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShelveServiceServer struct {
}

func (UnimplementedShelveServiceServer) GetShelves(context.Context, *GetShelvesRequest) (*GetShelvesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShelves not implemented")
}
func (UnimplementedShelveServiceServer) CreateShelf(context.Context, *CreateShelfRequest) (*CreateShelfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShelf not implemented")
}
func (UnimplementedShelveServiceServer) UpdateShelf(context.Context, *UpdateShelfRequest) (*UpdateShelfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShelf not implemented")
}
func (UnimplementedShelveServiceServer) RemoveShelf(context.Context, *RemoveShelfRequest) (*RemoveShelfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveShelf not implemented")
}
func (UnimplementedShelveServiceServer) mustEmbedUnimplementedShelveServiceServer() {}

// UnsafeShelveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShelveServiceServer will
// result in compilation errors.
type UnsafeShelveServiceServer interface {
	mustEmbedUnimplementedShelveServiceServer()
}

func RegisterShelveServiceServer(s grpc.ServiceRegistrar, srv ShelveServiceServer) {
	s.RegisterService(&ShelveService_ServiceDesc, srv)
}

func _ShelveService_GetShelves_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShelvesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShelveServiceServer).GetShelves(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShelveService_GetShelves_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShelveServiceServer).GetShelves(ctx, req.(*GetShelvesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShelveService_CreateShelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShelveServiceServer).CreateShelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShelveService_CreateShelf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShelveServiceServer).CreateShelf(ctx, req.(*CreateShelfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShelveService_UpdateShelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShelveServiceServer).UpdateShelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShelveService_UpdateShelf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShelveServiceServer).UpdateShelf(ctx, req.(*UpdateShelfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShelveService_RemoveShelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveShelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShelveServiceServer).RemoveShelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShelveService_RemoveShelf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShelveServiceServer).RemoveShelf(ctx, req.(*RemoveShelfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShelveService_ServiceDesc is the grpc.ServiceDesc for ShelveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShelveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ShelveService",
	HandlerType: (*ShelveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShelves",
			Handler:    _ShelveService_GetShelves_Handler,
		},
		{
			MethodName: "CreateShelf",
			Handler:    _ShelveService_CreateShelf_Handler,
		},
		{
			MethodName: "UpdateShelf",
			Handler:    _ShelveService_UpdateShelf_Handler,
		},
		{
			MethodName: "RemoveShelf",
			Handler:    _ShelveService_RemoveShelf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shelve.proto",
}
